
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/methods/plot_jdot_da.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_methods_plot_jdot_da.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_methods_plot_jdot_da.py:


Plot JDOT Regressor
===================

.. GENERATED FROM PYTHON SOURCE LINES 8-19

.. code-block:: Python

    import numpy as np
    import matplotlib.pyplot as plt

    from sklearn.metrics import mean_squared_error
    from sklearn.kernel_ridge import KernelRidge

    from skada import JDOTRegressor
    from skada.datasets import make_shifted_datasets
    from skada import source_target_split









.. GENERATED FROM PYTHON SOURCE LINES 20-22

Generate concept drift dataset
------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 22-37

.. code-block:: Python


    X, y, sample_domain = make_shifted_datasets(
            n_samples_source=20,
            n_samples_target=20,
            shift="concept_drift",
            noise=0.3,
            label="regression",
            random_state=42,
        )

    y = (y-y.mean())/y.std()

    Xs, Xt, ys, yt = source_target_split(X, y, sample_domain=sample_domain)









.. GENERATED FROM PYTHON SOURCE LINES 38-40

Plot data
---------

.. GENERATED FROM PYTHON SOURCE LINES 40-52

.. code-block:: Python


    plt.figure(1, (10, 5))
    plt.subplot(1, 2, 1)
    plt.scatter(Xs[:, 0], Xs[:, 1], c=ys, label="Source")
    plt.title("Source data")
    ax = plt.axis()

    plt.subplot(1, 2, 2)
    plt.scatter(Xt[:, 0], Xt[:, 1], c=yt, label="Target")
    plt.title("Target data")
    plt.axis(ax)




.. image-sg:: /auto_examples/methods/images/sphx_glr_plot_jdot_da_001.png
   :alt: Source data, Target data
   :srcset: /auto_examples/methods/images/sphx_glr_plot_jdot_da_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (-2.570318895725525, 4.744989537549497, -1.9610814126500358, 4.45933195939893)



.. GENERATED FROM PYTHON SOURCE LINES 53-55

Train on source data
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 55-88

.. code-block:: Python



    clf = KernelRidge(kernel='rbf', alpha=0.5)
    clf.fit(Xs, ys)

    # Compute accuracy on source and target
    ys_pred = clf.predict(Xs)
    yt_pred = clf.predict(Xt)

    mse_s = mean_squared_error(ys, ys_pred)
    mse_t = mean_squared_error(yt, yt_pred)

    print(f"MSE on source: {mse_s:.2f}")
    print(f"MSE on target: {mse_t:.2f}")

    XX, YY = np.meshgrid(np.linspace(ax[0], ax[1], 100), np.linspace(ax[2], ax[3], 100))
    Z = clf.predict(np.c_[XX.ravel(), YY.ravel()]).reshape(XX.shape)


    plt.figure(2, (10, 5))
    plt.subplot(1, 2, 1)
    plt.scatter(Xs[:, 0], Xs[:, 1], c=ys, label="Prediction")
    plt.imshow(Z, extent=(ax[0], ax[1], ax[2], ax[3]), origin='lower', alpha=0.5)
    plt.title(f"KRR Prediction on source (MSE={mse_s:.2f})")
    plt.axis(ax)

    plt.subplot(1, 2, 2)
    plt.scatter(Xt[:, 0], Xt[:, 1], c=yt, label="Prediction")
    plt.imshow(Z, extent=(ax[0], ax[1], ax[2], ax[3]), origin='lower', alpha=0.5)
    plt.title(f"KRR Prediction on target (MSE={mse_t:.2f})")
    plt.axis(ax)





.. image-sg:: /auto_examples/methods/images/sphx_glr_plot_jdot_da_002.png
   :alt: KRR Prediction on source (MSE=0.06), KRR Prediction on target (MSE=1.30)
   :srcset: /auto_examples/methods/images/sphx_glr_plot_jdot_da_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    MSE on source: 0.06
    MSE on target: 1.30

    (-2.570318895725525, 4.744989537549497, -1.9610814126500358, 4.45933195939893)



.. GENERATED FROM PYTHON SOURCE LINES 89-91

Train with JDOT regressor
-------------------------

.. GENERATED FROM PYTHON SOURCE LINES 91-120

.. code-block:: Python



    jdot = JDOTRegressor(base_estimator=KernelRidge(kernel='rbf', alpha=0.5), alpha=0.01)

    jdot.fit(X, y, sample_domain=sample_domain)

    ys_pred = jdot.predict(Xs)
    yt_pred = jdot.predict(Xt)

    mse_s = mean_squared_error(ys, ys_pred)
    mse_t = mean_squared_error(yt, yt_pred)

    Zjdot = jdot.predict(np.c_[XX.ravel(), YY.ravel()]).reshape(XX.shape)

    print(f"JDOT MSE on source: {mse_s:.2f}")
    print(f"JDOT MSE on target: {mse_t:.2f}")

    plt.figure(3, (10, 5))
    plt.subplot(1, 2, 1)
    plt.scatter(Xs[:, 0], Xs[:, 1], c=ys, label="Prediction")
    plt.imshow(Zjdot, extent=(ax[0], ax[1], ax[2], ax[3]), origin='lower', alpha=0.5)
    plt.title(f"JDOT Prediction on source (MSE={mse_s:.2f})")
    plt.axis(ax)

    plt.subplot(1, 2, 2)
    plt.scatter(Xt[:, 0], Xt[:, 1], c=yt, label="Prediction")
    plt.imshow(Zjdot, extent=(ax[0], ax[1], ax[2], ax[3]), origin='lower', alpha=0.5)
    plt.title(f"JDOT Prediction on target (MSE={mse_t:.2f})")
    plt.axis(ax)



.. image-sg:: /auto_examples/methods/images/sphx_glr_plot_jdot_da_003.png
   :alt: JDOT Prediction on source (MSE=0.64), JDOT Prediction on target (MSE=0.17)
   :srcset: /auto_examples/methods/images/sphx_glr_plot_jdot_da_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    JDOT MSE on source: 0.64
    JDOT MSE on target: 0.17

    (-2.570318895725525, 4.744989537549497, -1.9610814126500358, 4.45933195939893)




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.766 seconds)


.. _sphx_glr_download_auto_examples_methods_plot_jdot_da.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_jdot_da.ipynb <plot_jdot_da.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_jdot_da.py <plot_jdot_da.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
