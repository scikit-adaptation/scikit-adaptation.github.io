
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_how_to_use_skada.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_how_to_use_skada.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_how_to_use_skada.py:


How to use SKADA
====================================================

This is a short example of how to use SKADA to perform domain adaptation
on a simple dataset will illustration of the API choice specific to DA.

.. GENERATED FROM PYTHON SOURCE LINES 8-14

.. code-block:: Python


    # Author: Remi Flamary
    #
    # License: MIT License
    # sphinx_gallery_thumbnail_number = 1








.. GENERATED FROM PYTHON SOURCE LINES 15-32

.. code-block:: Python

    import numpy as np
    from sklearn.model_selection import GridSearchCV
    from skada.metrics import PredictionEntropyScorer
    from sklearn.model_selection import cross_val_score
    from sklearn.linear_model import LogisticRegression
    from skada import CORALAdapter, GaussianReweightDensityAdapter
    from skada import make_da_pipeline
    from skada.model_selection import SourceTargetShuffleSplit
    from sklearn.svm import SVC
    from sklearn.preprocessing import StandardScaler
    from sklearn.pipeline import make_pipeline
    from skada import CORAL
    import matplotlib.pyplot as plt

    from skada import source_target_split
    from skada.datasets import make_shifted_datasets








.. GENERATED FROM PYTHON SOURCE LINES 33-44

DA dataset
----------

We generate a simple 2D DA dataset. Note that DA data
are organized with all source and target sample as follows:

* :code:`X` is the input data
* :code:`y` is the output data to be predicted (labels on target samples are not
  used)
* :code:`sample_domain` is the domain of each sample (integer <=0 for
  source and >0 for target)

.. GENERATED FROM PYTHON SOURCE LINES 44-65

.. code-block:: Python


    # Get DA dataset
    X, y, sample_domain = make_shifted_datasets(
        20, 20, shift="concept_drift", random_state=42)

    # split source and target for visualization
    Xs, Xt, ys, yt = source_target_split(X, y, sample_domain=sample_domain)

    # plot data
    plt.figure(1, (10, 5))

    plt.subplot(1, 2, 1)
    plt.scatter(Xs[:, 0], Xs[:, 1], c=ys, cmap='tab10', vmax=9, label="Source")
    plt.title("Source data")
    ax = plt.axis()

    plt.subplot(1, 2, 2)
    plt.scatter(Xt[:, 0], Xt[:, 1], c=yt, cmap='tab10', vmax=9, label="Target")
    plt.axis(ax)
    plt.title("Target data")




.. image-sg:: /auto_examples/images/sphx_glr_plot_how_to_use_skada_001.png
   :alt: Source data, Target data
   :srcset: /auto_examples/images/sphx_glr_plot_how_to_use_skada_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(0.5, 1.0, 'Target data')



.. GENERATED FROM PYTHON SOURCE LINES 66-71

DA Classifier estimator
-----------------------

DA estimators are used exactly as regular estimators. The only difference is
that the :code:`sample_domain` array must be passed (by name).

.. GENERATED FROM PYTHON SOURCE LINES 71-86

.. code-block:: Python



    # create a DA estimator
    clf = CORAL()

    # train on all data
    clf.fit(X, y, sample_domain=sample_domain)

    # estimator is designed to predict on target by default
    yt_pred = clf.predict(Xt)

    # accuracy on source and target
    print('Accuracy on source:', clf.score(Xs, ys))
    print('Accuracy on target:', clf.score(Xt, yt))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Accuracy on source: 0.88125
    Accuracy on target: 0.94375




.. GENERATED FROM PYTHON SOURCE LINES 87-92

-----------------------------

DA estimators can be used as final estimator in the sklearn pipeline. The only
difference is that the :code:`sample_domain` array must be passed (by name)
during the fit.

.. GENERATED FROM PYTHON SOURCE LINES 92-100

.. code-block:: Python



    # create a DA pipeline
    pipe = make_pipeline(StandardScaler(), CORAL(base_estimator=SVC()))
    pipe.fit(X, y, sample_domain=sample_domain)

    print('Accuracy on target:', pipe.score(Xt, yt))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Accuracy on target: 1.0




.. GENERATED FROM PYTHON SOURCE LINES 101-119

DA Adapter pipeline
-------------------

Many DA method correspond to a data adapter that can be used to transform
data such that a regular estimator can be used. For those methods, skada
provides a :code:`Adapter` class that can be used in a DA pipeline from
:code: .

Here is an example with the CORAL and GaussianReweight adapter.

.. WARNING::
  Note that as illustrated below for
  adapters that reweight the data, one needs a subsequent estimator that
  requires the weighs as input. This can be done with :code:`set_fit_request`
  method of the estimator by executing
  :code:`.set_fit_request(sample_weight=True)`). If the estimator (for
  pipeline or DA estimator) does not
  require sample weights, the DA pipeline will raise an error.

.. GENERATED FROM PYTHON SOURCE LINES 119-135

.. code-block:: Python



    # create a DA pipeline with CORAL adapter
    pipe = make_da_pipeline(StandardScaler(), CORALAdapter(), SVC())
    pipe.fit(X, y, sample_domain=sample_domain)

    print('Accuracy on target:', pipe.score(Xt, yt))

    # create a DA pipeline with GaussianReweight adapter
    pipe = make_da_pipeline(StandardScaler(),
                            GaussianReweightDensityAdapter(),
                            LogisticRegression().set_fit_request(sample_weight=True))
    pipe.fit(X, y, sample_domain=sample_domain)

    print('Accuracy on target:', pipe.score(Xt, yt))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Accuracy on target: 1.0
    Accuracy on target: 0.5




.. GENERATED FROM PYTHON SOURCE LINES 136-142

DA estimator with cross-validation of score
-------------------------------------------

DA estimators can be used with cross-validation as regular estimators using
functions from sklearn. Note that the :code:`sample_domain` array must be
passed in the :code:`params` dictionary of the :code:`cross_val_score` function.

.. GENERATED FROM PYTHON SOURCE LINES 142-158

.. code-block:: Python



    # splitter for cross-validation of score
    cv = SourceTargetShuffleSplit(random_state=0)

    # DA scorer not using target labels (not available in DA)
    scorer = PredictionEntropyScorer()

    clf = CORAL(SVC(probability=True))  # needs probability for entropy score

    # cross-validation
    scores = cross_val_score(clf, X, y, params={'sample_domain': sample_domain},
                             cv=cv, scoring=scorer)

    print('Entropy score: {:1.2f} (+-{:1.2f})'.format(scores.mean(), scores.std()))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Entropy score: -0.17 (+-0.04)




.. GENERATED FROM PYTHON SOURCE LINES 159-165

DA estimator with grid search
-----------------------------

DA estimators can be used with grid search as regular estimators using
functions from sklearn. Note that the :code:`sample_domain` array must be
passed in the :code:`fit` method of the grid search.

.. GENERATED FROM PYTHON SOURCE LINES 165-183

.. code-block:: Python



    reg_coral = [0.1, 0.5, 1, "auto"]

    clf = make_da_pipeline(StandardScaler(), CORALAdapter(), SVC(probability=True))

    # grid search
    grid_search = GridSearchCV(
        estimator=clf,
        param_grid={"coraladapter__reg": reg_coral},
        cv=SourceTargetShuffleSplit(random_state=0),
        scoring=PredictionEntropyScorer(),
    )

    grid_search.fit(X, y, sample_domain=sample_domain)

    print('Best regularization parameter:', grid_search.best_params_['coraladapter__reg'])
    print('Accuracy on target:', np.mean(grid_search.predict(Xt) == yt))




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Best regularization parameter: 0.1
    Accuracy on target: 1.0





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.611 seconds)


.. _sphx_glr_download_auto_examples_plot_how_to_use_skada.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_how_to_use_skada.ipynb <plot_how_to_use_skada.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_how_to_use_skada.py <plot_how_to_use_skada.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
