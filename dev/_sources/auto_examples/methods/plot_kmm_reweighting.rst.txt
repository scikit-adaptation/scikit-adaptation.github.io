
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/methods/plot_kmm_reweighting.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_methods_plot_kmm_reweighting.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_methods_plot_kmm_reweighting.py:


Kernel Mean Matching
====================
This example illustrates the use of KMM method [1] to correct covariate-shift.

.. [1] J. Huang, A. Gretton, K. Borgwardt, B. Sch√∂lkopf and A. J. Smola.
        Correcting sample selection bias by unlabeled data. In NIPS, 2007.

.. GENERATED FROM PYTHON SOURCE LINES 9-15

.. code-block:: Python


    # Author: Antoine de Mathelin
    #
    # License: BSD 3-Clause
    # sphinx_gallery_thumbnail_number = 1








.. GENERATED FROM PYTHON SOURCE LINES 16-24

.. code-block:: Python

    import matplotlib.pyplot as plt
    from matplotlib.colors import ListedColormap
    from sklearn.inspection import DecisionBoundaryDisplay
    from sklearn.linear_model import LogisticRegression

    from skada import KMM
    from skada.datasets import make_shifted_datasets








.. GENERATED FROM PYTHON SOURCE LINES 25-27

Generate sample bias dataset
----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 27-40

.. code-block:: Python

    ds = make_shifted_datasets(
        n_samples_source=12,
        n_samples_target=3,
        shift="covariate_shift",
        label="binary",
        noise=0.4,
        random_state=123,
        return_dataset=True,
    )
    X, y, sample_domain = ds.pack_train(as_sources=["s"], as_targets=["t"])
    Xs, ys = ds.get_domain("s")
    Xt, yt = ds.get_domain("t")








.. GENERATED FROM PYTHON SOURCE LINES 41-43

Illustration of Importance Weighting
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 43-133

.. code-block:: Python

    for smooth in [False, True]:
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))

        cm = ListedColormap(["w", "k"])

        base_estimator = LogisticRegression().set_fit_request(sample_weight=True)
        kmm = KMM(base_estimator, gamma=10.0, max_iter=1000, smooth_weights=smooth)
        kmm.fit(X, y, sample_domain=sample_domain)
        weights = kmm[0].transform(X, sample_domain=sample_domain, allow_source=True)
        weights = weights["sample_weight"]

        src_weights = weights[sample_domain == 1]
        src_weights /= src_weights.mean()
        src_weights *= 30.0

        base_estimator.fit(Xs, ys)
        acc = base_estimator.score(Xt, yt)

        ax1.scatter(
            Xs[ys == 0, 0], Xs[ys == 0, 1], color="C0", label="Source 1", edgecolor="b"
        )
        ax1.plot(Xt[yt == 0, 0], Xt[yt == 0, 1], "o", c="r", label="Target 1")
        ax1.scatter(
            Xs[ys == 1, 0],
            Xs[ys == 1, 1],
            color="C0",
            marker="s",
            label="Source 2",
            edgecolor="b",
        )
        ax1.plot(Xt[yt == 1, 0], Xt[yt == 1, 1], "s", c="r", label="Target 2")
        xlim = ax1.get_xlim()
        ylim = ax1.get_ylim()
        DecisionBoundaryDisplay.from_estimator(
            base_estimator,
            Xs,
            plot_method="contour",
            response_method="predict",
            cmap=cm,
            ax=ax1,
        )
        ax1.set_xlim(xlim)
        ax1.set_ylim(ylim)
        ax1.set_title("Before Reweighting - Acc %.2f" % acc, fontsize=16)
        ax1.set_xlabel("X1", fontsize=14)
        ax1.set_ylabel("X2", fontsize=14)
        ax1.legend(loc="lower left", fontsize=14, ncol=2, framealpha=True, edgecolor="k")

        acc = kmm.score(Xt, yt)

        ax2.scatter(
            Xs[ys == 0, 0],
            Xs[ys == 0, 1],
            s=src_weights[ys == 0],
            color="C0",
            label="Source 1",
            edgecolor="b",
        )
        ax2.plot(Xt[yt == 0, 0], Xt[yt == 0, 1], "o", c="r", alpha=0.8, label="Target 1")
        ax2.scatter(
            Xs[ys == 1, 0],
            Xs[ys == 1, 1],
            s=src_weights[ys == 1],
            color="C0",
            marker="s",
            label="Source 2",
            edgecolor="b",
        )
        ax2.plot(Xt[yt == 1, 0], Xt[yt == 1, 1], "s", c="r", alpha=0.8, label="Target 2")
        xlim = ax2.get_xlim()
        ylim = ax2.get_ylim()
        DecisionBoundaryDisplay.from_estimator(
            kmm[1].base_estimator_,
            Xs,
            plot_method="contour",
            response_method="predict",
            cmap=cm,
            ax=ax2,
        )
        ax2.set_xlim(xlim)
        ax2.set_ylim(ylim)
        ax2.set_title("After Reweighting - Acc %.2f" % acc, fontsize=16)
        ax2.set_xlabel("X1", fontsize=14)
        ax2.set_ylabel("X2", fontsize=14)
        ax2.legend(loc="lower left", fontsize=14, ncol=2, framealpha=True, edgecolor="k")

        ax1.tick_params(direction="in", labelleft=False, labelbottom=False)
        ax2.tick_params(direction="in", labelleft=False, labelbottom=False)
        plt.suptitle("Smooth Weights = %s" % str(smooth), fontsize=16, color="b")
        plt.show()



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/methods/images/sphx_glr_plot_kmm_reweighting_001.png
         :alt: Smooth Weights = False, Before Reweighting - Acc 0.83, After Reweighting - Acc 0.88
         :srcset: /auto_examples/methods/images/sphx_glr_plot_kmm_reweighting_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/methods/images/sphx_glr_plot_kmm_reweighting_002.png
         :alt: Smooth Weights = True, Before Reweighting - Acc 0.83, After Reweighting - Acc 0.88
         :srcset: /auto_examples/methods/images/sphx_glr_plot_kmm_reweighting_002.png
         :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.796 seconds)


.. _sphx_glr_download_auto_examples_methods_plot_kmm_reweighting.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_kmm_reweighting.ipynb <plot_kmm_reweighting.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_kmm_reweighting.py <plot_kmm_reweighting.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
