
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/deep/plot_divergence.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_deep_plot_divergence.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_deep_plot_divergence.py:


Divergence domain adaptation methods.
==========================================

This example illustrates the DeepCoral method from [1]
on a simple image classification task.

.. [1]  Baochen Sun and Kate Saenko. Deep coral:
        Correlation alignment for deep domain
        adaptation. In ECCV Workshops, 2016.

.. GENERATED FROM PYTHON SOURCE LINES 13-18

.. code-block:: Python

    # Author: Théo Gnassounou
    #
    # License: BSD 3-Clause
    # sphinx_gallery_thumbnail_number = 4








.. GENERATED FROM PYTHON SOURCE LINES 19-26

.. code-block:: Python

    from skorch import NeuralNetClassifier
    from torch import nn

    from skada.datasets import load_mnist_usps
    from skada.deep import DeepCoral
    from skada.deep.modules import MNISTtoUSPSNet








.. GENERATED FROM PYTHON SOURCE LINES 27-29

Load the image datasets
----------------------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 29-34

.. code-block:: Python


    dataset = load_mnist_usps(n_classes=2, n_samples=0.5, return_dataset=True)
    X, y, sample_domain = dataset.pack_train(as_sources=["mnist"], as_targets=["usps"])
    X_test, y_test, sample_domain_test = dataset.pack_test(as_targets=["usps"])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz
    Failed to download (trying next):
    <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1007)>

    Downloading https://ossci-datasets.s3.amazonaws.com/mnist/train-images-idx3-ubyte.gz
    Downloading https://ossci-datasets.s3.amazonaws.com/mnist/train-images-idx3-ubyte.gz to ./datasets/MNIST/raw/train-images-idx3-ubyte.gz
      0%|          | 0.00/9.91M [00:00<?, ?B/s]    100%|██████████| 9.91M/9.91M [00:00<00:00, 295MB/s]
    Extracting ./datasets/MNIST/raw/train-images-idx3-ubyte.gz to ./datasets/MNIST/raw

    Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz
    Failed to download (trying next):
    <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1007)>

    Downloading https://ossci-datasets.s3.amazonaws.com/mnist/train-labels-idx1-ubyte.gz
    Downloading https://ossci-datasets.s3.amazonaws.com/mnist/train-labels-idx1-ubyte.gz to ./datasets/MNIST/raw/train-labels-idx1-ubyte.gz
      0%|          | 0.00/28.9k [00:00<?, ?B/s]    100%|██████████| 28.9k/28.9k [00:00<00:00, 75.0MB/s]
    Extracting ./datasets/MNIST/raw/train-labels-idx1-ubyte.gz to ./datasets/MNIST/raw

    Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz
    Failed to download (trying next):
    <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1007)>

    Downloading https://ossci-datasets.s3.amazonaws.com/mnist/t10k-images-idx3-ubyte.gz
    Downloading https://ossci-datasets.s3.amazonaws.com/mnist/t10k-images-idx3-ubyte.gz to ./datasets/MNIST/raw/t10k-images-idx3-ubyte.gz
      0%|          | 0.00/1.65M [00:00<?, ?B/s]    100%|██████████| 1.65M/1.65M [00:00<00:00, 266MB/s]
    Extracting ./datasets/MNIST/raw/t10k-images-idx3-ubyte.gz to ./datasets/MNIST/raw

    Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz
    Failed to download (trying next):
    <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: certificate has expired (_ssl.c:1007)>

    Downloading https://ossci-datasets.s3.amazonaws.com/mnist/t10k-labels-idx1-ubyte.gz
    Downloading https://ossci-datasets.s3.amazonaws.com/mnist/t10k-labels-idx1-ubyte.gz to ./datasets/MNIST/raw/t10k-labels-idx1-ubyte.gz
      0%|          | 0.00/4.54k [00:00<?, ?B/s]    100%|██████████| 4.54k/4.54k [00:00<00:00, 14.0MB/s]
    Extracting ./datasets/MNIST/raw/t10k-labels-idx1-ubyte.gz to ./datasets/MNIST/raw

    /home/circleci/project/skada/datasets/_mnist_usps.py:72: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
      mnist_target = torch.tensor(mnist_dataset.targets)
    Downloading https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multiclass/usps.t.bz2 to ./datasets/usps.t.bz2
      0%|          | 0.00/1.83M [00:00<?, ?B/s]      2%|▏         | 32.8k/1.83M [00:00<00:21, 82.9kB/s]      4%|▎         | 65.5k/1.83M [00:00<00:21, 82.8kB/s]      5%|▌         | 98.3k/1.83M [00:01<00:20, 82.8kB/s]      7%|▋         | 131k/1.83M [00:01<00:17, 98.0kB/s]       9%|▉         | 164k/1.83M [00:01<00:17, 96.0kB/s]     11%|█         | 197k/1.83M [00:02<00:15, 107kB/s]      13%|█▎        | 229k/1.83M [00:02<00:13, 121kB/s]     14%|█▍        | 262k/1.83M [00:02<00:14, 105kB/s]     16%|█▌        | 295k/1.83M [00:02<00:12, 119kB/s]     18%|█▊        | 328k/1.83M [00:03<00:11, 130kB/s]     20%|█▉        | 360k/1.83M [00:03<00:12, 116kB/s]     21%|██▏       | 393k/1.83M [00:03<00:11, 121kB/s]     23%|██▎       | 426k/1.83M [00:03<00:10, 132kB/s]     25%|██▌       | 459k/1.83M [00:04<00:09, 141kB/s]     27%|██▋       | 492k/1.83M [00:04<00:09, 147kB/s]     29%|██▊       | 524k/1.83M [00:04<00:10, 125kB/s]     30%|███       | 557k/1.83M [00:04<00:09, 135kB/s]     32%|███▏      | 590k/1.83M [00:04<00:08, 143kB/s]     34%|███▍      | 623k/1.83M [00:05<00:08, 149kB/s]     36%|███▌      | 655k/1.83M [00:05<00:07, 154kB/s]     38%|███▊      | 688k/1.83M [00:05<00:07, 157kB/s]     41%|████      | 754k/1.83M [00:05<00:05, 195kB/s]     43%|████▎     | 786k/1.83M [00:05<00:05, 187kB/s]     45%|████▍     | 819k/1.83M [00:06<00:05, 193kB/s]     48%|████▊     | 885k/1.83M [00:06<00:04, 220kB/s]     50%|█████     | 918k/1.83M [00:06<00:04, 218kB/s]     54%|█████▎    | 983k/1.83M [00:06<00:03, 237kB/s]     57%|█████▋    | 1.05M/1.83M [00:06<00:02, 264kB/s]     61%|██████    | 1.11M/1.83M [00:07<00:02, 303kB/s]     64%|██████▍   | 1.18M/1.83M [00:07<00:02, 312kB/s]     68%|██████▊   | 1.25M/1.83M [00:07<00:01, 318kB/s]     73%|███████▎  | 1.34M/1.83M [00:07<00:01, 372kB/s]     79%|███████▊  | 1.44M/1.83M [00:07<00:00, 410kB/s]     84%|████████▍ | 1.54M/1.83M [00:08<00:00, 436kB/s]     91%|█████████ | 1.67M/1.83M [00:08<00:00, 504kB/s]     98%|█████████▊| 1.80M/1.83M [00:08<00:00, 551kB/s]    100%|██████████| 1.83M/1.83M [00:08<00:00, 215kB/s]




.. GENERATED FROM PYTHON SOURCE LINES 35-37

Train a classic model
----------------------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 37-48

.. code-block:: Python

    model = NeuralNetClassifier(
        MNISTtoUSPSNet(),
        criterion=nn.CrossEntropyLoss(),
        batch_size=128,
        max_epochs=5,
        train_split=False,
        lr=1e-2,
    )
    model.fit(X[sample_domain > 0], y[sample_domain > 0])
    model.score(X_test, y=y_test)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      epoch    train_loss     dur
    -------  ------------  ------
          1        1.7808  5.6032
          2        0.5054  5.2955
          3        0.1594  5.6059
          4        0.0823  6.2968
          5        0.0583  5.9980

    0.9035369774919614



.. GENERATED FROM PYTHON SOURCE LINES 49-51

Train a DeepCoral model
----------------------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 51-62

.. code-block:: Python

    model = DeepCoral(
        MNISTtoUSPSNet(),
        layer_name="fc1",
        batch_size=128,
        max_epochs=5,
        train_split=False,
        reg=1,
        lr=1e-2,
    )
    model.fit(X, y, sample_domain=sample_domain)
    model.score(X_test, y_test, sample_domain=sample_domain_test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      epoch    train_loss      dur
    -------  ------------  -------
          1        1.5685  10.0694
          2        0.3898  8.5993
          3        0.1267  8.5979
          4        0.0779  7.8056
          5        0.0613  8.5987

    0.9131832797427653




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 28.957 seconds)


.. _sphx_glr_download_auto_examples_deep_plot_divergence.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_divergence.ipynb <plot_divergence.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_divergence.py <plot_divergence.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_divergence.zip <plot_divergence.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
