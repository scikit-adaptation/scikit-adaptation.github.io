
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/deep/plot_divergence.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_deep_plot_divergence.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_deep_plot_divergence.py:


Divergence domain adaptation methods.
==========================================

This example illustrates the DeepCoral method from [1]
on a simple image classification task.

.. [1]  Baochen Sun and Kate Saenko. Deep coral:
        Correlation alignment for deep domain
        adaptation. In ECCV Workshops, 2016.

.. GENERATED FROM PYTHON SOURCE LINES 13-18

.. code-block:: Python

    # Author: Théo Gnassounou
    #
    # License: BSD 3-Clause
    # sphinx_gallery_thumbnail_number = 4








.. GENERATED FROM PYTHON SOURCE LINES 19-26

.. code-block:: Python

    from skorch import NeuralNetClassifier
    from torch import nn

    from skada.datasets import load_mnist_usps
    from skada.deep import DeepCoral
    from skada.deep.modules import MNISTtoUSPSNet








.. GENERATED FROM PYTHON SOURCE LINES 27-29

Load the image datasets
----------------------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 29-34

.. code-block:: Python


    dataset = load_mnist_usps(n_classes=2, n_samples=0.5, return_dataset=True)
    X, y, sample_domain = dataset.pack_train(as_sources=["mnist"], as_targets=["usps"])
    X_test, y_test, sample_domain_test = dataset.pack_test(as_targets=["usps"])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz
    Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz to ./datasets/MNIST/raw/train-images-idx3-ubyte.gz
      0%|          | 0/9912422 [00:00<?, ?it/s]    100%|██████████| 9912422/9912422 [00:00<00:00, 495828448.61it/s]
    Extracting ./datasets/MNIST/raw/train-images-idx3-ubyte.gz to ./datasets/MNIST/raw

    Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz
    Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz to ./datasets/MNIST/raw/train-labels-idx1-ubyte.gz
      0%|          | 0/28881 [00:00<?, ?it/s]    100%|██████████| 28881/28881 [00:00<00:00, 217089057.03it/s]
    Extracting ./datasets/MNIST/raw/train-labels-idx1-ubyte.gz to ./datasets/MNIST/raw

    Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz
    Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz to ./datasets/MNIST/raw/t10k-images-idx3-ubyte.gz
      0%|          | 0/1648877 [00:00<?, ?it/s]    100%|██████████| 1648877/1648877 [00:00<00:00, 226936551.16it/s]
    Extracting ./datasets/MNIST/raw/t10k-images-idx3-ubyte.gz to ./datasets/MNIST/raw

    Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz
    Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz to ./datasets/MNIST/raw/t10k-labels-idx1-ubyte.gz
      0%|          | 0/4542 [00:00<?, ?it/s]    100%|██████████| 4542/4542 [00:00<00:00, 43494357.92it/s]
    Extracting ./datasets/MNIST/raw/t10k-labels-idx1-ubyte.gz to ./datasets/MNIST/raw

    /home/circleci/project/skada/datasets/_mnist_usps.py:72: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
      mnist_target = torch.tensor(mnist_dataset.targets)
    Downloading https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multiclass/usps.t.bz2 to ./datasets/usps.t.bz2
      0%|          | 0/1831726 [00:00<?, ?it/s]      2%|▏         | 32768/1831726 [00:00<00:11, 160285.58it/s]      4%|▎         | 65536/1831726 [00:00<00:10, 160578.60it/s]      5%|▌         | 98304/1831726 [00:00<00:10, 160531.01it/s]     13%|█▎        | 229376/1831726 [00:00<00:04, 350447.50it/s]     23%|██▎       | 425984/1831726 [00:01<00:02, 570964.42it/s]     47%|████▋     | 851968/1831726 [00:01<00:00, 1086028.43it/s]     95%|█████████▍| 1736704/1831726 [00:01<00:00, 2145030.83it/s]    100%|██████████| 1831726/1831726 [00:01<00:00, 1279707.64it/s]




.. GENERATED FROM PYTHON SOURCE LINES 35-37

Train a classic model
----------------------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 37-48

.. code-block:: Python

    model = NeuralNetClassifier(
        MNISTtoUSPSNet(),
        criterion=nn.CrossEntropyLoss(),
        batch_size=128,
        max_epochs=5,
        train_split=False,
        lr=1e-2,
    )
    model.fit(X[sample_domain > 0], y[sample_domain > 0])
    model.score(X_test, y=y_test)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      epoch    train_loss     dur
    -------  ------------  ------
          1        1.4579  4.4005
          2        0.2766  4.6999
          3        0.1022  4.6033
          4        0.0592  4.1994
          5        0.0411  5.0943

    0.9292604501607717



.. GENERATED FROM PYTHON SOURCE LINES 49-51

Train a DeepCoral model
----------------------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 51-62

.. code-block:: Python

    model = DeepCoral(
        MNISTtoUSPSNet(),
        layer_name="fc1",
        batch_size=128,
        max_epochs=5,
        train_split=False,
        reg=1,
        lr=1e-2,
    )
    model.fit(X, y, sample_domain=sample_domain)
    model.score(X_test, y_test, sample_domain=sample_domain_test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      epoch    train_loss      dur
    -------  ------------  -------
          1        1.6638  12.1781
          2        0.4048  12.5951
          3        0.1864  11.2993
          4        0.1262  10.8991
          5        0.1019  11.3985

    0.9131832797427653




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 29.446 seconds)


.. _sphx_glr_download_auto_examples_deep_plot_divergence.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_divergence.ipynb <plot_divergence.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_divergence.py <plot_divergence.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
