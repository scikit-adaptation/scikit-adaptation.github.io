
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/deep/plot_divergence.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_deep_plot_divergence.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_deep_plot_divergence.py:


Divergence domain adaptation methods.
==========================================

This example illustrates the DeepCoral method from [1]
on a simple image classification task.

.. [1]  Baochen Sun and Kate Saenko. Deep coral:
        Correlation alignment for deep domain
        adaptation. In ECCV Workshops, 2016.

.. GENERATED FROM PYTHON SOURCE LINES 13-18

.. code-block:: Python

    # Author: Théo Gnassounou
    #
    # License: BSD 3-Clause
    # sphinx_gallery_thumbnail_number = 4








.. GENERATED FROM PYTHON SOURCE LINES 19-26

.. code-block:: Python

    from skorch import NeuralNetClassifier
    from torch import nn

    from skada.datasets import load_mnist_usps
    from skada.deep import DeepCoral
    from skada.deep.modules import MNISTtoUSPSNet








.. GENERATED FROM PYTHON SOURCE LINES 27-29

Load the image datasets
----------------------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 29-34

.. code-block:: Python


    dataset = load_mnist_usps(n_classes=2, n_samples=0.5, return_dataset=True)
    X, y, sample_domain = dataset.pack_train(as_sources=["mnist"], as_targets=["usps"])
    X_test, y_test, sample_domain_test = dataset.pack_test(as_targets=["usps"])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz
    Failed to download (trying next):
    HTTP Error 403: Forbidden

    Downloading https://ossci-datasets.s3.amazonaws.com/mnist/train-images-idx3-ubyte.gz
    Downloading https://ossci-datasets.s3.amazonaws.com/mnist/train-images-idx3-ubyte.gz to ./datasets/MNIST/raw/train-images-idx3-ubyte.gz
      0%|          | 0.00/9.91M [00:00<?, ?B/s]    100%|██████████| 9.91M/9.91M [00:00<00:00, 170MB/s]
    Extracting ./datasets/MNIST/raw/train-images-idx3-ubyte.gz to ./datasets/MNIST/raw

    Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz
    Failed to download (trying next):
    HTTP Error 403: Forbidden

    Downloading https://ossci-datasets.s3.amazonaws.com/mnist/train-labels-idx1-ubyte.gz
    Downloading https://ossci-datasets.s3.amazonaws.com/mnist/train-labels-idx1-ubyte.gz to ./datasets/MNIST/raw/train-labels-idx1-ubyte.gz
      0%|          | 0.00/28.9k [00:00<?, ?B/s]    100%|██████████| 28.9k/28.9k [00:00<00:00, 32.7MB/s]
    Extracting ./datasets/MNIST/raw/train-labels-idx1-ubyte.gz to ./datasets/MNIST/raw

    Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz
    Failed to download (trying next):
    HTTP Error 403: Forbidden

    Downloading https://ossci-datasets.s3.amazonaws.com/mnist/t10k-images-idx3-ubyte.gz
    Downloading https://ossci-datasets.s3.amazonaws.com/mnist/t10k-images-idx3-ubyte.gz to ./datasets/MNIST/raw/t10k-images-idx3-ubyte.gz
      0%|          | 0.00/1.65M [00:00<?, ?B/s]    100%|██████████| 1.65M/1.65M [00:00<00:00, 160MB/s]
    Extracting ./datasets/MNIST/raw/t10k-images-idx3-ubyte.gz to ./datasets/MNIST/raw

    Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz
    Failed to download (trying next):
    HTTP Error 403: Forbidden

    Downloading https://ossci-datasets.s3.amazonaws.com/mnist/t10k-labels-idx1-ubyte.gz
    Downloading https://ossci-datasets.s3.amazonaws.com/mnist/t10k-labels-idx1-ubyte.gz to ./datasets/MNIST/raw/t10k-labels-idx1-ubyte.gz
      0%|          | 0.00/4.54k [00:00<?, ?B/s]    100%|██████████| 4.54k/4.54k [00:00<00:00, 11.5MB/s]
    Extracting ./datasets/MNIST/raw/t10k-labels-idx1-ubyte.gz to ./datasets/MNIST/raw

    /home/circleci/project/skada/datasets/_mnist_usps.py:72: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
      mnist_target = torch.tensor(mnist_dataset.targets)
    Downloading https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multiclass/usps.t.bz2 to ./datasets/usps.t.bz2
      0%|          | 0.00/1.83M [00:00<?, ?B/s]      2%|▏         | 32.8k/1.83M [00:00<00:10, 168kB/s]      4%|▎         | 65.5k/1.83M [00:00<00:23, 76.7kB/s]      5%|▌         | 98.3k/1.83M [00:00<00:17, 102kB/s]       7%|▋         | 131k/1.83M [00:01<00:14, 114kB/s]      11%|█         | 197k/1.83M [00:01<00:11, 144kB/s]     14%|█▍        | 262k/1.83M [00:01<00:08, 182kB/s]     16%|█▌        | 295k/1.83M [00:01<00:08, 178kB/s]     18%|█▊        | 328k/1.83M [00:02<00:08, 185kB/s]     20%|█▉        | 360k/1.83M [00:02<00:10, 134kB/s]     21%|██▏       | 393k/1.83M [00:02<00:09, 149kB/s]     23%|██▎       | 426k/1.83M [00:02<00:09, 154kB/s]     25%|██▌       | 459k/1.83M [00:03<00:12, 113kB/s]     27%|██▋       | 492k/1.83M [00:03<00:12, 111kB/s]     29%|██▊       | 524k/1.83M [00:04<00:11, 113kB/s]     30%|███       | 557k/1.83M [00:04<00:14, 90.1kB/s]     32%|███▏      | 590k/1.83M [00:04<00:14, 88.2kB/s]     34%|███▍      | 623k/1.83M [00:05<00:13, 86.9kB/s]     36%|███▌      | 655k/1.83M [00:05<00:12, 93.3kB/s]     38%|███▊      | 688k/1.83M [00:05<00:12, 94.3kB/s]     39%|███▉      | 721k/1.83M [00:06<00:13, 82.9kB/s]     41%|████      | 754k/1.83M [00:06<00:13, 78.3kB/s]     43%|████▎     | 786k/1.83M [00:07<00:11, 89.0kB/s]     45%|████▍     | 819k/1.83M [00:07<00:12, 78.2kB/s]     47%|████▋     | 852k/1.83M [00:08<00:12, 79.7kB/s]     48%|████▊     | 885k/1.83M [00:08<00:11, 80.9kB/s]     50%|█████     | 918k/1.83M [00:08<00:11, 81.7kB/s]     52%|█████▏    | 950k/1.83M [00:09<00:10, 82.3kB/s]     54%|█████▎    | 983k/1.83M [00:09<00:10, 82.6kB/s]     55%|█████▌    | 1.02M/1.83M [00:10<00:09, 83.0kB/s]     57%|█████▋    | 1.05M/1.83M [00:10<00:09, 83.3kB/s]     59%|█████▉    | 1.08M/1.83M [00:10<00:07, 93.9kB/s]     61%|██████    | 1.11M/1.83M [00:11<00:07, 94.5kB/s]     63%|██████▎   | 1.15M/1.83M [00:11<00:06, 99.9kB/s]     64%|██████▍   | 1.18M/1.83M [00:11<00:06, 102kB/s]      66%|██████▌   | 1.21M/1.83M [00:11<00:05, 106kB/s]     68%|██████▊   | 1.25M/1.83M [00:12<00:05, 107kB/s]     70%|██████▉   | 1.28M/1.83M [00:12<00:04, 114kB/s]     72%|███████▏  | 1.31M/1.83M [00:12<00:04, 108kB/s]     73%|███████▎  | 1.34M/1.83M [00:13<00:04, 115kB/s]     75%|███████▌  | 1.38M/1.83M [00:13<00:03, 126kB/s]     77%|███████▋  | 1.41M/1.83M [00:13<00:03, 123kB/s]     79%|███████▊  | 1.44M/1.83M [00:13<00:03, 113kB/s]     81%|████████  | 1.47M/1.83M [00:14<00:02, 132kB/s]     82%|████████▏ | 1.51M/1.83M [00:14<00:02, 112kB/s]     84%|████████▍ | 1.54M/1.83M [00:14<00:02, 106kB/s]     86%|████████▌ | 1.57M/1.83M [00:15<00:02, 108kB/s]     88%|████████▊ | 1.61M/1.83M [00:15<00:02, 104kB/s]     89%|████████▉ | 1.64M/1.83M [00:15<00:01, 101kB/s]     91%|█████████ | 1.67M/1.83M [00:16<00:01, 104kB/s]     93%|█████████▎| 1.70M/1.83M [00:16<00:01, 102kB/s]     95%|█████████▍| 1.74M/1.83M [00:16<00:00, 110kB/s]     97%|█████████▋| 1.77M/1.83M [00:16<00:00, 110kB/s]     98%|█████████▊| 1.80M/1.83M [00:17<00:00, 96.6kB/s]    100%|██████████| 1.83M/1.83M [00:17<00:00, 105kB/s] 




.. GENERATED FROM PYTHON SOURCE LINES 35-37

Train a classic model
----------------------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 37-48

.. code-block:: Python

    model = NeuralNetClassifier(
        MNISTtoUSPSNet(),
        criterion=nn.CrossEntropyLoss(),
        batch_size=128,
        max_epochs=5,
        train_split=False,
        lr=1e-2,
    )
    model.fit(X[sample_domain > 0], y[sample_domain > 0])
    model.score(X_test, y=y_test)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      epoch    train_loss     dur
    -------  ------------  ------
          1        1.4386  3.5977
          2        0.2424  3.6965
          3        0.1015  3.9967
          4        0.0625  4.7000
          5        0.0442  4.2995

    0.9228295819935691



.. GENERATED FROM PYTHON SOURCE LINES 49-51

Train a DeepCoral model
----------------------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 51-62

.. code-block:: Python

    model = DeepCoral(
        MNISTtoUSPSNet(),
        layer_name="fc1",
        batch_size=128,
        max_epochs=5,
        train_split=False,
        reg=1,
        lr=1e-2,
    )
    model.fit(X, y, sample_domain=sample_domain)
    model.score(X_test, y_test, sample_domain=sample_domain_test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      epoch    train_loss     dur
    -------  ------------  ------
          1        1.5298  8.6064
          2        0.3405  7.2951
          3        0.1147  7.4032
          4        0.0697  7.9982
          5        0.0600  7.6971

    0.9196141479099679




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 24.684 seconds)


.. _sphx_glr_download_auto_examples_deep_plot_divergence.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_divergence.ipynb <plot_divergence.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_divergence.py <plot_divergence.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_divergence.zip <plot_divergence.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
